install.packages("learnPopGen")
genetic.drift()
object<-genetic.drift(p0=0.7,show="heterozygosity")
plot(object,show="genotypes")
genetic.drift(p0=0.5, Ne=20, nrep=10, time=100, show="p", pause=0.1, ...)
genetic.drift(p0=0.5, Ne=20, nrep=10, time=100, show="p", pause=0.1, ...)
object<-genetic.drift(p0=0.5, Ne=20, nrep=10, time=100, show="p", pause=0.1, ...)
plot(object,show="genotypes")
genetic.drift(p0=0.5, Ne=20, nrep=10, time=100, show="p", pause=0.1)
object<-genetic.drift(p0=0.5, Ne=20, nrep=10, time=100, show="p", pause=0.1)
library(learnPopGen)
install.packages("learnPopGen")
genetic.drift(p0=0.5, Ne=20, nrep=10, time=100, show="p", pause=0.1)
object<-genetic.drift(p0=0.5, Ne=20, nrep=10, time=100, show="p", pause=0.1)
plot(object,show="p")
library(learnPopGen)
genetic.drift(p0=0.5, Ne=20, nrep=10, time=100, show="p", pause=0.1)
object<-genetic.drift(p0=0.5, Ne=20, nrep=10, time=100, show="p", pause=0.1)
plot(object,show="p")
genetic.drift(p0=0.7, Ne=50, nrep=25, time=150, show="genotypes", pause=0.1)
object<-genetic.drift(p0=0.7, Ne=50, nrep=25, time=150, show="genotypes", pause=0.1)
plot(object,show="genotypes")
library(vegan)
install.packages("vegan")
library(vegan)
install.packages("vegan")
install.packages("vegan")
library(vegan)
install.packages("diversity")
install.packages("diveRsity")
library(diveRsity)
install.packages("vegan")
install.packages("vegan")
install.packages("vegan")
library(vegan)
install.package("permute")
install.packages("permute")
install.packages("permute")
install.packages("lattice")
library(permute)
library(lattice)
x <- c(15, 6, 4, 0, 3, 0)
dominance(x)
library(vegan)
library(permute)
library(lattice)
x <- c(15, 6, 4, 0, 3, 0)
dominance(x)
simpson.unb(x)
simpson.unb(x, inverse=FALSE)
x <- c(15, 6, 4, 0, 3, 0)
simpson.unb(x, inverse=FALSE)
simpson.unb
x <- c(12, 4, 3, 1, 2, 1)
invsimpson(x)
?invsimpson(x)
x <- c(15, 6, 4, 0, 3, 0)
diversity(x, index = "Shannon", groups, equalize.groups = FALSE, MARGIN = 1, base = exp(1))
simpson.unb(x, inverse + FALSE)
fisher.aplha(x, MARGIN = 1)
specnumber(x, groups, MARGIN = 1)
library(vegan)
x <- c(15, 6, 4, 0, 3, 0)
diversity(x, index = "Shannon", groups, equalize.groups = FALSE, MARGIN = 1, base = exp(1))
simpson.unb(x, inverse + FALSE)
fisher.aplha(x, MARGIN = 1)
specnumber(x, groups, MARGIN = 1)
x <- c(15, 6, 4, 0, 3, 0)
diversity(x, index = "Shannon", equalize.groups = FALSE, MARGIN = 1, base = exp(1))
simpson(x, inverse + FALSE)
simpson(x, inverse = FALSE)
simpson.unb(x, inverse = FALSE)
fisher.aplha(x, MARGIN = 1)
install.packages(diveRsity)
install.packages("diveRsity")
library(diveRsity)
library(diveRsity)
data(BCI, BCI.env)
H <- diversity(BCI)
simp <- diversity(BCI, "simpson")
invsimp <- diversity(BCI, "inv")
x <- c(15, 6, 4, 0, 3, 0)
diversity(x, index = "Shannon", equalize.groups = FALSE, MARGIN = 1, base = exp(1))
simpson.unb(x, inverse = FALSE)
x <- c(12, 4, 3, 1, 2, 1)
inv(x)
help(diversity)
x <- c(15, 6, 4, 0, 3, 0)
diversity(x, index = "Shannon", groups = 6, equalize.groups = FALSE, MARGIN = 1, base = exp(1))
diversity(x, index = "simpson", groups = 6, equalize.groups = FALSE, MARGIN = 1, base = exp(1))
simpson.unb(x, inverse = FALSE)
data(BCI, BCI.env)
H <- diversity(BCI)
simp <- diversity(BCI, "simpson")
invsimp <- diversity(BCI, "inv")
library(diveRsity)
x <- c(15, 6, 4, 0, 3, 0)
diversity(x, index = "simpson", groups = 6, equalize.groups = FALSE, MARGIN = 1, base = exp(1))
simpson.unb(x, inverse = FALSE)
x <- c(12, 4, 3, 1, 2, 1)
diversity(x, index = "invsimpson", groups = 6, equalize.groups = FALSE, MARGIN = 1, base = exp(1))
invsimpson(x, "invsimpson")
invsimpson(x, inverse = TRUE)
x <- c(12, 4, 3, 1, 2, 1)
diversity(x, index = "invsimpson", groups = 6, equalize.groups = FALSE, MARGIN = 1, base = exp(1))
invsimpson(x, inverse = TRUE)
invsimpson(x, "invsimpson")
x <- c(12, 4, 3, 1, 2, 1)
diversity(x, index = "invsimpson", groups = 6, equalize.groups = FALSE, MARGIN = 1, base = exp(1))
invsimp(x, "invsimp")
invsimp(x, "inversesimpson")
invsimp(x, inverse = TRUE)
library(vegan)
library(permute)
library(lattice)
library(diveRsity)
x <- c(15, 6, 4, 0, 3, 0)
diversity(x, index = "simpson", groups = 6, equalize.groups = FALSE, MARGIN = 1, base = exp(1))
x <- c(12, 4, 3, 1, 2, 1)
diversity(x, index = "invsimpson", groups = 6, equalize.groups = FALSE, MARGIN = 1, base = exp(1))
x <- c(12, 4, 3, 1, 2, 1)
diversity(x, index = "invsimpson", groups = 6, equalize.groups = FALSE, MARGIN = 1, base = exp(1))
setwd("C:/GitHub/morgan")
jpeg(file = "Thomas Genetic Drift Reference Manual Example.jpeg", width = 4, height = 3)
jpeg(file = "Thomas Genetic Drift Reference Manual Example.jpeg", width = 3, height = 2)
jpeg(file = "Thomas Genetic Drift Reference Manual Example.jpeg")
par(family = "serif")
dev.off()
jpeg(file = "Thomas Genetic Drift Manipulated Example.jpeg")
par(family = "serif")
dev.off()
library(learnPopGen)
genetic.drift(p0=0.7, Ne=50, nrep=25, time=150, show="genotypes", pause=0.1)
object<-genetic.drift(p0=0.7, Ne=50, nrep=25, time=150, show="genotypes", pause=0.1)
plot(object,show="genotypes")
jpeg(file = "Thomas Genetic Drift Manipulated Example.jpeg")
par(family = "serif")
dev.off()
library(learnPopGen)
genetic.drift(p0=0.5, Ne=20, nrep=10, time=100, show="p", pause=0.1)
object<-genetic.drift(p0=0.5, Ne=20, nrep=10, time=100, show="p", pause=0.1)
plot(object,show="p")
setwd("C:/GitHub/morgan")
jpeg(file = "Thomas Genetic Drift Ref Manual Example.jpeg")
par(family = "serif")
dev.off()
data <- read.csv(file=("C:/GitHub/morgan/Week 5/Figure4Data.csv"), header=T)
#(1) Poisson
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fitp <- fitdist(c(na.exclude(one.col)), distr = "pois")
fitp
library(fitdistrplus)
library(logspline)
#(1) Poisson
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fitp <- fitdist(c(na.exclude(one.col)), distr = "pois")
fitp
#(1) Negative Binomial
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fitnb <- fitdist(c(na.exclude(one.col)), distr = "nbinom")
fitnb
#(1) Logistic
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fit.logis <- fitdist(c(na.exclude(one.col)), distr = "logis")
fit.logis
gofstat(list(fitp, fitnb, fit.logis))
fits = lapply(fitnames, function(i){fitdist(prob, distr = i, method = "mle")})
fits = lapply(fitp, fitnb, fit.logis, function(i){fitdist(prob, distr = i, method = "mle")})
data <- read.csv(file=("C:/GitHub/morgan/Week 5/Figure4Data.csv"), header=T)
library(fitdistrplus)
library(logspline)
#(1) Poisson
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fitp <- fitdist(c(na.exclude(one.col)), distr = "pois")
fitp
#(1) Negative Binomial
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fitnb <- fitdist(c(na.exclude(one.col)), distr = "nbinom")
fitnb
#(1) Logistic
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fit.logis <- fitdist(c(na.exclude(one.col)), distr = "logis")
fit.logis
gofstat(list(fitp, fitnb, fit.logis))
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fitp <- fitdist(c(na.exclude(one.col)), distr = "pois")
fitp
#(1) Negative Binomial
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fitnb <- fitdist(c(na.exclude(one.col)), distr = "nbinom")
fitnb
#(1) Logistic
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fit.logis <- fitdist(c(na.exclude(one.col)), distr = "logis")
fit.logis
fits <- lapply(fitp, fitnb, fit.logis, function(i){fitdist(prob, distr = i, method = "mle")})
gofstat(list(fitp, fitnb, fit.logis), chisqbreaks=c(1,2,4,8,16,32,64))
gofstat(list(fitp, fitnb, fit.logis), chisqbreaks=c(1,2,4,8,16,32,64))
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fitp <- fitdist(c(na.exclude(one.col)), distr = "pois")
fitp
#(1) Negative Binomial
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fitnb <- fitdist(c(na.exclude(one.col)), distr = "nbinom")
fitnb
#(1) Logistic
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fit.logis <- fitdist(c(na.exclude(one.col)), distr = "logis")
fit.logis
gofstat(list(fitp, fitnb, fit.logis), chisqbreaks=c(1,2,4,8,16,32,64))
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fitp <- fitdist(c(na.exclude(one.col)), distr = "pois")
fitp
#(1) Negative Binomial
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fitnb <- fitdist(c(na.exclude(one.col)), distr = "nbinom")
fitnb
#(1) Logistic
one.col <- data$Num.Cells.Progeny
hist(one.col, main = "Number of Cells in Progeny")
fit.logis <- fitdist(c(na.exclude(one.col)), distr = "logis")
fit.logis
gofstat(list(fitp, fitnb, fit.logis), chisqbreaks=c(1,2,4,8,16,32,64))
one.col <- data$RepTime.sec
hist(one.col, main = "Replication Time")
fitp <- fitdist(c(na.exclude(one.col)), distr = "pois")
fitp
#(2) Negative Binomial
one.col <- data$RepTime.sec
hist(one.col, main = "Replication Time")
fitnb <- fitdist(c(na.exclude(one.col)), distr = "nbinom")
fitnb
#(2) Logistic
one.col <- data$RepTime.sec
hist(one.col, main = "Replication Time")
fit.logis <- fitdist(c(na.exclude(one.col)), distr = "logis")
fit.logis
gofstat(list(fitp, fitnb, fit.logis), chisqbreaks=c(1,2,4,8,16,32,64))
one.col <- data$RepTime.sec
hist(one.col, main = "Time")
fit.norm <- fitdist(one.col*100, distr = "norm")
hist(one.col, main = "Replication Time")
fit.norm <- fitdist(one.col*100, distr = "norm")
plot(fit.norm)
one.col <- data$RepTime.sec
hist(one.col, main = "Replication Time")
fit.norm <- fitdist(c(na.exclude(one.col)), distr = "norm")
plot(fit.norm)
one.col <- data$RepTime.sec
hist(one.col, main = "Replication Time")
one.col?
one.col?
?one.col
